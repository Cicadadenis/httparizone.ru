from re import M
from aiogram import Dispatcher, executor
from aiogram.dispatcher.filters import ChatTypeFilter
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram import Bot, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher import Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import CallbackQuery, Message
import urllib.parse
import urllib.request
import ssl
import time
import ftplib
"""
host = 'ruvip51.hostiman.ru'
ftp_user = 'cicada'
ftp_password = 'Tramadol1989!'

ftp = ftplib.FTP(host, ftp_user, ftp_password)
 
welcome = ftp.getwelcome() 
print(welcome)

ftp.cwd("www/arizone.ru/")

ftp_file = 'index.html'
local_file = 'index.html'
file = "index.html"
with open(local_file, 'wb') as local_file: 
    ftp.retrbinary('retr ' + ftp_file, local_file.write) 

ssl._create_default_https_context = ssl._create_unverified_context

site = "http://arizone.ru"


url = urllib.parse.quote_plus(site)
width = 1920
height = 1080
output = "image"
"""
ssl._create_default_https_context = ssl._create_unverified_context

site = "http://arizone.ru"


url = urllib.parse.quote_plus(site)
width = 1920
height = 1080
output = "image"
token = "J2R5PZN-34Q4J42-JPTRJD4-Y9F6BHT"
bot = Bot(token="5277009385:AAFw-LUouS4qHJ7sS_iDI3sKYKGKLyvesYU", parse_mode=types.ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class sms13(StatesGroup):
    sms_text = State()

class sms12(StatesGroup):
    sms_text = State()

class sms11(StatesGroup):
    sms_text = State()

class sms10(StatesGroup):
    sms_text = State()

class sms9(StatesGroup):
    sms_text = State()

class sms8(StatesGroup):
    sms_text = State()

class sms7(StatesGroup):
    sms_text = State()

class sms6(StatesGroup):
    sms_text = State()

class sms5(StatesGroup):
    sms_text = State()

class sms4(StatesGroup):
    sms_text = State()

class sms3(StatesGroup):
    sms_text = State()

class sms2(StatesGroup):
    sms_text = State()



xxx = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üì± –û–ø–µ—Ä–∞—Ç–æ—Ä", callback_data="oper"),
            InlineKeyboardButton(text="üí° –¢–µ—Ö–ø—Ä–æ–¥–∞–∂–∏", callback_data="tex"),
            InlineKeyboardButton(text="ü§ñ –ë–æ—Ç", callback_data="bbb")
        ],

        [
            InlineKeyboardButton(text="üêç Hudra", callback_data="hudra"),
            InlineKeyboardButton(text="üí∞ –†–∞–±–æ—Ç–∞", callback_data="rab"),
            InlineKeyboardButton(text="üíµ –†–∞–±–æ—Ç–∞ WhatsApp", callback_data="whatsApp")
        ],

        [
            InlineKeyboardButton(text="üñá –†–µ–∑–µ—Ä–≤", callback_data="rezerv"),
            InlineKeyboardButton(text="üéü Legal", callback_data="leg"),
            InlineKeyboardButton(text="üìñ –û—Ç–∑—ã–≤—ã", callback_data="otz")
        ],

        [
            InlineKeyboardButton(text="üèô –§–æ–Ω —Å–∞–π—Ç–∞", callback_data="fon"),
            InlineKeyboardButton(text="üéÜ –õ–æ–≥–æ—Ç–∏–ø", callback_data="logot"),
            InlineKeyboardButton(text="üìù –í–∏–¥–∂–µ—Ç", callback_data="widjet")
        ],

        [
            InlineKeyboardButton(text="üöë –í–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="news")
        ]
    ]
)


@dp.message_handler(commands=['start'])
async def start(message: Message):
    await message.answer("<b>–ó–∞–≥—Ä—É–∂–∞—é —Å–∞–π—Ç –æ–∂–∏–¥–∞–π....</b>")
    host = 'ruvip51.hostiman.ru'
    ftp_user = 'cicada'
    ftp_password = 'Tramadol1989!'

    ftp = ftplib.FTP(host, ftp_user, ftp_password)
    
    ftp.cwd("www/arizone.ru/")

    ftp_file = 'index.html'
    local_file = 'index.html'
    file = "index.html"
    with open(local_file, 'wb') as local_file: 
        ftp.retrbinary('retr ' + ftp_file, local_file.write) 
    chat_id = message.chat.id
    with open ('index.html', 'r') as f:
      old_data = f.readlines()
      tt = old_data[518]
      tat = tt.split('"')
      otziv = tat[7]
      tt1 = old_data[505]
      tat1 = tt1.split('"')
      legal = tat1[7]
      tt2 = old_data[497]
      tat2 = tt2.split('"')
      rez = tat2[7]
      tt3 = old_data[481]
      tat3 = tt3.split('"')
      wc = tat3[7]
      tt4 = old_data[474]
      tat4 = tt4.split('"')
      rabota = tat4[7]
      tt5 = old_data[459]
      tat5 = tt5.split('"')
      gidra = tat5[7]
      tt6 = old_data[452]
      tat6 = tt6.split('"')
      bbboot = tat6[7]
      tt7 = old_data[439]
      tat7 = tt7.split('"')
      texx = tat7[1]
      tt8 = old_data[430]
      tat8 = tt8.split('"')
      oer = tat8[7]
    query = "https://shot.screenshotapi.net/screenshot"
    query += "?token=%s&url=%s&width=%d&height=%d&output=%s" % (token, url, width, height, output)
    urllib.request.urlretrieve(query, "./screenshot.png")
    with open("screenshot.png", 'rb') as f:
      foto = f.read()
    cap = "<b>–¢–∞–∫ –í—ã–≥–ª—è–¥–∏—Ç –°–∞–π—Ç</b>"
    await bot.send_photo(chat_id, foto, caption=cap)
    time.sleep(4)
    await message.answer(
      f"<b>–ü—Ä–∏–º–µ—Ä —Å–∞–π—Ç–∞ –æ–Ω–ª–∞–∏–Ω —Ç—É—Ç: </b>\n\n"
      f"http://arizone.ru\n"
      f"<b>–°–µ–π—á–∞—Å –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ç–∞–∫–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã: </b>\n\n"
      f"<b>üì± –û–ø–µ—Ä–∞—Ç–æ—Ä:</b>  <code>{oer}</code>\n"
      f"<b>üí° –¢–µ—Ö–ø—Ä–æ–¥–∞–∂–∏:</b> <code>{texx}</code>\n"
      f"<b>ü§ñ –ë–æ—Ç:</b>  <code>{bbboot}</code>\n"
      f"<b>üêç Hudra:</b>  <code>{gidra}</code>\n"
      f"<b>üí∞ –†–∞–±–æ—Ç–∞:</b> <code>{rabota}</code>\n"
      f"<b>üíµ –†–∞–±–æ—Ç–∞ WhatsApp:</b>  <code>{wc}</code>\n"
      f"<b>üñá –†–µ–∑–µ—Ä–≤:</b> <code>{rez}</code>\n"
      f"<b>üéü Legal:</b>  <code>{legal}</code>\n"
      f"<b>üìñ –û—Ç–∑—ã–≤—ã:</b> <code>{otziv}</code>\n\n"
      f"<b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</b>", reply_markup=xxx)
    file_to_upload = open(file, 'rb')
    ftp.storbinary('STOR ' + file, file_to_upload)

    ftp.close()


@dp.callback_query_handler(text="widjet", state="*")
async def widjet(call: CallbackQuery, state: FSMContext):
    await call.message.answer(
      f"<b>–î–ª—è –£—Å—Ç–∞–Ω–æ–≤–∫–∏ –í–∏–¥–∂–µ—Ç–∞ </b>\n"
      f"<b>1. –ù—É–∂–Ω–æ –∏–º–µ—Ç—å –ü—É–±–ª–∏—á–Ω—ã–π –ö–∞–Ω–∞–ª –ª–∏–±–æ –ì—Ä—É–ø–ø—É</b>\n"
      f"<b>–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É –±–æ—Ç–∞ @tgwidgetgroup_bot</b>\n"
      f"<b>–ò –Ω–∞—á–∞—Ç—å —Å –Ω–∏–º –¥–∏–∞–ª–æ–≥ –æ–Ω –¥–∞—Å—Ç —Å—Å—ã–ª–∫—É, –ø–µ—Ä–µ–π—Ç–∏ –ø–æ –Ω–µ–π</b>\n"
      f"<b>–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç</b>\n"
      f"<b>2. –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –°–∞–π—Ç —Å–æ–∑–¥–∞–Ω–∏—è <a href='https://tgwidget.com/'>–≤–∏–¥–∂–µ—Ç–∞</a></b>\n"
      f"<b>–ù–∞–∂–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –í–∏–¥–∂–µ—Ç</b>\n"
      f"<b>–í–≤–µ—Å—Ç–∏ username –∫–∞–Ω–∞–ª–∞ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ @username</b>\n"
      f"<b>–í –ø–æ—è–≤–∏–≤—à–µ–º—Å—è –æ–∫–Ω–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥</b>\n"
      f"<b>–Ω—É–∂–Ω–æ–≥–æ –≤–∞–º –≤–∏–¥–∂–µ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—é–¥–∞</b>\n"
      f"<b>–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å –≤–∏–¥–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ '-'</b>")
    await sms13.sms_text.set()

    @dp.message_handler(state=sms13.sms_text)
    async def widjet(message: Message,  state: FSMContext):
        await message.answer("<b>–ò–¥–µ—Ç –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –î–∞–Ω–Ω—ã—Ö –°–∞–π—Ç–∞....</b>")
        chat_id = message.chat.id
        data = await state.get_data()
        sms = message.text
        nonwidjet = '<!-- <iframe id="tgw_6228fffaa05ecf3a2f3eb723" frameborder="0" scrolling="no" horizontalscrolling="no" verticalscrolling="no" width="100%" height="540px" async></iframe><script>document.addEventListener("DOMContentLoaded",function(){document.getElementById("tgw_6228fffaa05ecf3a2f3eb723").setAttribute("src","https://tgwidget.com/channel/v2.0/?id=6228fffaa05ecf3a2f3eb723")})</script>-->'
        if sms == '-':
            sms = nonwidjet
        host = 'ruvip51.hostiman.ru'
        ftp_user = 'cicada'
        ftp_password = 'Tramadol1989!'

        ftp = ftplib.FTP(host, ftp_user, ftp_password)
        
        ftp.cwd("www/arizone.ru/")

        ftp_file = 'index.html'
        local_file = 'index.html'
        file = "index.html"
        with open(local_file, 'wb') as local_file: 
            ftp.retrbinary('retr ' + ftp_file, local_file.write)
        with open ('index.html', 'r') as f:
          old_data = f.readlines()
          tt = old_data[527]
          with open ('index.html', 'r') as f:
            old_data = f.read()
            new_data = old_data.replace(tt, sms)
          with open ('index.html', 'w') as f:
            f.write(new_data)
          file_to_upload = open(file, 'rb')
          ftp.storbinary('STOR ' + file, file_to_upload)

          ftp.close()
          query = "https://shot.screenshotapi.net/screenshot"
          query += "?token=%s&url=%s&width=%d&height=%d&output=%s" % (token, url, width, height, output)
          urllib.request.urlretrieve(query, "./screenshot.png")
          with open("screenshot.png", 'rb') as f:
            foto = f.read()
          cap = (
            f"<b>–î–∞–Ω—ã–µ –ø–æ –í–∏–¥–∂–µ—Ç—É –û–±–Ω–æ–≤–ª–µ–Ω—ã !</b>\n"
            f"<b>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç: </b>\n\n"
            f"http://arizone.ru\n"
          )
          await bot.send_photo(chat_id, foto, caption=cap, reply_markup=xxx)


@dp.callback_query_handler(text="news", state="*")
async def news(call: CallbackQuery, state: FSMContext):
    chat_id = call.message.chat.id
    host = 'ruvip51.hostiman.ru'
    ftp_user = 'cicada'
    ftp_password = 'Tramadol1989!'

    ftp = ftplib.FTP(host, ftp_user, ftp_password)
    
    ftp.cwd("www/arizone.ru/")
    await call.message.answer("<b>–ò–¥–µ—Ç –í–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –î–∞–Ω–Ω—ã—Ö –°–∞–π—Ç–∞....</b>")
    file = "recovery.html"
    
    file_to_upload = open(file, 'rb')
    ftp.storbinary('STOR ' + file, file_to_upload)

    ftp.close()
    query = "https://shot.screenshotapi.net/screenshot"
    query += "?token=%s&url=%s&width=%d&height=%d&output=%s" % (token, url, width, height, output)
    urllib.request.urlretrieve(query, "./screenshot.png")
    with open("screenshot.png", 'rb') as f:
      foto = f.read()
    cap = (
      f"<b>–°–∞–π—Ç —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω !</b>\n"
      f"<b>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç: </b>\n\n"
      f"http://arizone.ru\n"
    )
    await bot.send_photo(chat_id, foto, caption=cap, reply_markup=xxx)



@dp.callback_query_handler(text="logot", state="*")
async def logot(call: CallbackQuery, state: FSMContext):
    host = 'ruvip51.hostiman.ru'
    ftp_user = 'cicada'
    ftp_password = 'Tramadol1989!'

    ftp = ftplib.FTP(host, ftp_user, ftp_password)
    
    ftp.cwd("www/arizone.ru/")

    ftp_file = 'index.html'
    local_file = 'index.html'
    file = "index.html"
    with open(local_file, 'wb') as local_file: 
        ftp.retrbinary('retr ' + ftp_file, local_file.write)
    with open ('index.html', 'r') as f:
      old_data = f.readlines()
      tt = old_data[413]
      tat = tt.split('"')
      zc = tat[29][22:-2]
    await sms12.sms_text.set()
    await call.message.answer(
      f"<b>–°–µ–π—á–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {zc}</b>\n\n"
      f"<b>–í–≤–µ–¥–∏ —Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ http://image.jpg </b>")
    

    @dp.message_handler(state=sms12.sms_text)
    async def logot(message: Message,  state: FSMContext):
        chat_id = message.chat.id
        data = await state.get_data()
        sms = message.text
        print(sms[-3:])
        if sms[-3:] == "png":
          await message.answer("<b>–ò–¥–µ—Ç –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –î–∞–Ω–Ω—ã—Ö –°–∞–π—Ç–∞....</b>")
          with open ('index.html', 'r') as f:
            old_data = f.read()
            new_data = old_data.replace(zc, sms)
          
          with open ('index.html', 'w') as f:
            f.write(new_data)
          file_to_upload = open(file, 'rb')
          ftp.storbinary('STOR ' + file, file_to_upload)

          ftp.close()
          query = "https://shot.screenshotapi.net/screenshot"
          query += "?token=%s&url=%s&width=%d&height=%d&output=%s" % (token, url, width, height, output)
          urllib.request.urlretrieve(query, "./screenshot.png")
          with open("screenshot.png", 'rb') as f:
            foto = f.read()
          cap = (
            f"<b>–õ–æ–≥–æ—Ç–∏–ø —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω !</b>\n"
            f"<b>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç: </b>\n\n"
            f"http://arizone.ru\n"
          )
          await bot.send_photo(chat_id, foto, caption=cap, reply_markup=xxx)

        if sms[-3:] == "jpg":
          await message.answer("<b>–ò–¥–µ—Ç –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –î–∞–Ω–Ω—ã—Ö –°–∞–π—Ç–∞....</b>")
          with open ('index.html', 'r') as f:
            old_data = f.read()
            new_data = old_data.replace(zc, sms)
          
          with open ('index.html', 'w') as f:
            f.write(new_data)
          file_to_upload = open(file, 'rb')
          ftp.storbinary('STOR ' + file, file_to_upload)

          ftp.close()
          query = "https://shot.screenshotapi.net/screenshot"
          query += "?token=%s&url=%s&width=%d&height=%d&output=%s" % (token, url, width, height, output)
          urllib.request.urlretrieve(query, "./screenshot.png")
          with open("screenshot.png", 'rb') as f:
            foto = f.read()
          cap = (
            f"<b>–õ–æ–≥–æ—Ç–∏–ø —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω !</b>\n"
            f"<b>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç: </b>\n\n"
            f"http://arizone.ru\n"
          )
          await bot.send_photo(chat_id, foto, caption=cap, reply_markup=xxx)

        else:
          await call.message.answer("<b>–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>")


@dp.callback_query_handler(text="fon", state="*")
async def fon(call: CallbackQuery, state: FSMContext):
    host = 'ruvip51.hostiman.ru'
    ftp_user = 'cicada'
    ftp_password = 'Tramadol1989!'

    ftp = ftplib.FTP(host, ftp_user, ftp_password)
    
    ftp.cwd("www/arizone.ru/")

    ftp_file = 'index.html'
    local_file = 'index.html'
    file = "index.html"
    with open(local_file, 'wb') as local_file: 
        ftp.retrbinary('retr ' + ftp_file, local_file.write)
    with open ('index.html', 'r') as f:
      old_data = f.readlines()
      tt = old_data[378]
      tat = tt.split('"')
      zc = tat[1][22:-2]
    await call.message.answer(
      f"<b>–°–µ–π—á–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {zc}</b>\n\n"
      f"<b>–í–≤–µ–¥–∏ —Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ http://image.jpg </b>")
    await sms11.sms_text.set()

    @dp.message_handler(state=sms11.sms_text)
    async def otz(message: Message,  state: FSMContext):
        chat_id = message.chat.id
        data = await state.get_data()
        sms = message.text
        print(sms[-3:])
        if sms[-3:] == "png":
          await message.answer("<b>–ò–¥–µ—Ç –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –î–∞–Ω–Ω—ã—Ö –°–∞–π—Ç–∞....</b>")
          with open ('index.html', 'r') as f:
            old_data = f.read()
            new_data = old_data.replace(zc, sms)
          
          with open ('index.html', 'w') as f:
            f.write(new_data)
          file_to_upload = open(file, 'rb')
          ftp.storbinary('STOR ' + file, file_to_upload)

          ftp.close()
          query = "https://shot.screenshotapi.net/screenshot"
          query += "?token=%s&url=%s&width=%d&height=%d&output=%s" % (token, url, width, height, output)
          urllib.request.urlretrieve(query, "./screenshot.png")
          with open("screenshot.png", 'rb') as f:
            foto = f.read()
          cap = (
            f"<b>–î–∞–Ω–Ω—ã–µ –°–∞–π—Ç–∞ –û–±–Ω–æ–≤–ª–µ–Ω—ã !</b>\n"
            f"<b>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç: </b>\n\n"
            f"http://arizone.ru\n"
          )
          await bot.send_photo(chat_id, foto, caption=cap, reply_markup=xxx)

        if sms[-3:] == "jpg":
          await message.answer("<b>–ò–¥–µ—Ç –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –î–∞–Ω–Ω—ã—Ö –°–∞–π—Ç–∞....</b>")
          with open ('index.html', 'r') as f:
            old_data = f.read()
            new_data = old_data.replace(zc, sms)
          
          with open ('index.html', 'w') as f:
            f.write(new_data)
          file_to_upload = open(file, 'rb')
          ftp.storbinary('STOR ' + file, file_to_upload)
          ftp.close()
          query = "https://shot.screenshotapi.net/screenshot"
          query += "?token=%s&url=%s&width=%d&height=%d&output=%s" % (token, url, width, height, output)
          urllib.request.urlretrieve(query, "./screenshot.png")
          with open("screenshot.png", 'rb') as f:
            foto = f.read()
          cap = (
            f"<b>–î–∞–Ω–Ω—ã–µ –°–∞–π—Ç–∞ –û–±–Ω–æ–≤–ª–µ–Ω—ã !</b>\n"
            f"<b>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç: </b>\n\n"
            f"http://arizone.ru\n"
          )
          await bot.send_photo(chat_id, foto, caption=cap, reply_markup=xxx)

        else:
          await call.message.answer("<b>–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>")


@dp.callback_query_handler(text="otz", state="*")
async def otz(call: CallbackQuery, state: FSMContext):
    host = 'ruvip51.hostiman.ru'
    ftp_user = 'cicada'
    ftp_password = 'Tramadol1989!'

    ftp = ftplib.FTP(host, ftp_user, ftp_password)
    
    ftp.cwd("www/arizone.ru/")

    ftp_file = 'index.html'
    local_file = 'index.html'
    file = "index.html"
    with open(local_file, 'wb') as local_file: 
        ftp.retrbinary('retr ' + ftp_file, local_file.write)
    with open ('index.html', 'r') as f:
      old_data = f.readlines()
      tt = old_data[518]
      tat = tt.split('"')
      otziv = tat[7]
      tt1 = old_data[505]
      tat1 = tt1.split('"')
      legal = tat1[7]
      tt2 = old_data[497]
      tat2 = tt2.split('"')
      rez = tat2[7]
      tt3 = old_data[481]
      tat3 = tt3.split('"')
      wc = tat3[7]
      tt4 = old_data[474]
      tat4 = tt4.split('"')
      rabota = tat4[7]
      tt5 = old_data[459]
      tat5 = tt5.split('"')
      gidra = tat5[7]
      tt6 = old_data[452]
      tat6 = tt6.split('"')
      bbboot = tat6[7]
      tt7 = old_data[439]
      tat7 = tt7.split('"')
      texx = tat7[1]
      tt8 = old_data[430]
      tat8 = tt8.split('"')
      oer = tat8[7]


    await call.message.answer(
      f"<b>–°–µ–π—á–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {otziv}</b>\n\n"
      f"<b>–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ http://t.me/username/ </b>")
    await sms10.sms_text.set()


    @dp.message_handler(state=sms10.sms_text)
    async def otz(message: Message,  state: FSMContext):
        chat_id = message.chat.id
        data = await state.get_data()
        sms = message.text
        if sms[:3] == 'htt':
          await message.answer("<b>–ò–¥–µ—Ç –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –î–∞–Ω–Ω—ã—Ö –°–∞–π—Ç–∞....</b>")
          with open ('index.html', 'r') as f:
            old_data = f.read()
            new_data = old_data.replace(otziv, sms)
          
          with open ('index.html', 'w') as f:
            f.write(new_data)
          file_to_upload = open(file, 'rb')
          ftp.storbinary('STOR ' + file, file_to_upload)
          ftp.close()
          query = "https://shot.screenshotapi.net/screenshot"
          query += "?token=%s&url=%s&width=%d&height=%d&output=%s" % (token, url, width, height, output)
          urllib.request.urlretrieve(query, "./screenshot.png")
          with open("screenshot.png", 'rb') as f:
            foto = f.read()
          cap = (
            f"<b>–î–∞–Ω–Ω—ã–µ –°–∞–π—Ç–∞ –û–±–Ω–æ–≤–ª–µ–Ω—ã !</b>\n"
            f"<b>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç: </b>\n\n"
            f"http://arizone.ru\n"
          )
          await bot.send_photo(chat_id, foto, caption=cap, reply_markup=xxx)

        else:
          await call.message.answer("<b>–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>")



@dp.callback_query_handler(text="leg", state="*")
async def leg(call: CallbackQuery, state: FSMContext):
    host = 'ruvip51.hostiman.ru'
    ftp_user = 'cicada'
    ftp_password = 'Tramadol1989!'

    ftp = ftplib.FTP(host, ftp_user, ftp_password)
    
    ftp.cwd("www/arizone.ru/")

    ftp_file = 'index.html'
    local_file = 'index.html'
    file = "index.html"
    with open(local_file, 'wb') as local_file: 
        ftp.retrbinary('retr ' + ftp_file, local_file.write)
    with open ('index.html', 'r') as f:
      old_data = f.readlines()
      tt = old_data[518]
      tat = tt.split('"')
      otziv = tat[7]
      tt1 = old_data[505]
      tat1 = tt1.split('"')
      legal = tat1[7]
      tt2 = old_data[497]
      tat2 = tt2.split('"')
      rez = tat2[7]
      tt3 = old_data[481]
      tat3 = tt3.split('"')
      wc = tat3[7]
      tt4 = old_data[474]
      tat4 = tt4.split('"')
      rabota = tat4[7]
      tt5 = old_data[459]
      tat5 = tt5.split('"')
      gidra = tat5[7]
      tt6 = old_data[452]
      tat6 = tt6.split('"')
      bbboot = tat6[7]
      tt7 = old_data[439]
      tat7 = tt7.split('"')
      texx = tat7[1]
      tt8 = old_data[430]
      tat8 = tt8.split('"')
      oer = tat8[7]

    await call.message.answer(
      f"<b>–°–µ–π—á–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {legal}</b>\n\n"
      f"<b>–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ http://t.me/username/ </b>")
    await sms9.sms_text.set()


    @dp.message_handler(state=sms9.sms_text)
    async def leg(message: Message,  state: FSMContext):
        await message.answer("<b>–ò–¥–µ—Ç –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –î–∞–Ω–Ω—ã—Ö –°–∞–π—Ç–∞....</b>")
        chat_id = message.chat.id
        data = await state.get_data()
        sms = message.text
        with open ('index.html', 'r') as f:
          old_data = f.read()
          new_data = old_data.replace(legal, sms)
        
        with open ('index.html', 'w') as f:
          f.write(new_data)
        file_to_upload = open(file, 'rb')
        ftp.storbinary('STOR ' + file, file_to_upload)
        ftp.close()
        query = "https://shot.screenshotapi.net/screenshot"
        query += "?token=%s&url=%s&width=%d&height=%d&output=%s" % (token, url, width, height, output)
        urllib.request.urlretrieve(query, "./screenshot.png")
        with open("screenshot.png", 'rb') as f:
          foto = f.read()
        cap = (
          f"<b>–î–∞–Ω–Ω—ã–µ –°–∞–π—Ç–∞ –û–±–Ω–æ–≤–ª–µ–Ω—ã !</b>\n"
          f"<b>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç: </b>\n\n"
          f"http://arizone.ru\n"
        )
        await bot.send_photo(chat_id, foto, caption=cap, reply_markup=xxx)

@dp.callback_query_handler(text="rezerv", state="*")
async def rezerv(call: CallbackQuery, state: FSMContext):
    host = 'ruvip51.hostiman.ru'
    ftp_user = 'cicada'
    ftp_password = 'Tramadol1989!'

    ftp = ftplib.FTP(host, ftp_user, ftp_password)
    
    ftp.cwd("www/arizone.ru/")

    ftp_file = 'index.html'
    local_file = 'index.html'
    file = "index.html"
    with open(local_file, 'wb') as local_file: 
        ftp.retrbinary('retr ' + ftp_file, local_file.write)
    with open ('index.html', 'r') as f:
      old_data = f.readlines()
      tt = old_data[518]
      tat = tt.split('"')
      otziv = tat[7]
      tt1 = old_data[505]
      tat1 = tt1.split('"')
      legal = tat1[7]
      tt2 = old_data[497]
      tat2 = tt2.split('"')
      rez = tat2[7]
      tt3 = old_data[481]
      tat3 = tt3.split('"')
      wc = tat3[7]
      tt4 = old_data[474]
      tat4 = tt4.split('"')
      rabota = tat4[7]
      tt5 = old_data[459]
      tat5 = tt5.split('"')
      gidra = tat5[7]
      tt6 = old_data[452]
      tat6 = tt6.split('"')
      bbboot = tat6[7]
      tt7 = old_data[439]
      tat7 = tt7.split('"')
      texx = tat7[1]
      tt8 = old_data[430]
      tat8 = tt8.split('"')
      oer = tat8[7]
    await call.message.answer(
      f"<b>–°–µ–π—á–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {rez}</b>\n\n"
      f"<b>–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ http://t.me/username/ </b>")
    await sms8.sms_text.set()


    @dp.message_handler(state=sms8.sms_text)
    async def rezerv(message: Message,  state: FSMContext):
        await message.answer("<b>–ò–¥–µ—Ç –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –î–∞–Ω–Ω—ã—Ö –°–∞–π—Ç–∞....</b>")
        chat_id = message.chat.id
        data = await state.get_data()
        sms = message.text
        with open ('index.html', 'r') as f:
          old_data = f.read()
          new_data = old_data.replace(rez, sms)
        
        with open ('index.html', 'w') as f:
          f.write(new_data)
        file_to_upload = open(file, 'rb')
        ftp.storbinary('STOR ' + file, file_to_upload)
        ftp.close()
        query = "https://shot.screenshotapi.net/screenshot"
        query += "?token=%s&url=%s&width=%d&height=%d&output=%s" % (token, url, width, height, output)
        urllib.request.urlretrieve(query, "./screenshot.png")
        with open("screenshot.png", 'rb') as f:
          foto = f.read()
        cap = (
          f"<b>–î–∞–Ω–Ω—ã–µ –°–∞–π—Ç–∞ –û–±–Ω–æ–≤–ª–µ–Ω—ã !</b>\n"
          f"<b>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç: </b>\n\n"
          f"http://arizone.ru\n"
        )
        await bot.send_photo(chat_id, foto, caption=cap, reply_markup=xxx)



@dp.callback_query_handler(text="whatsApp", state="*")
async def whatsApp(call: CallbackQuery, state: FSMContext):
    host = 'ruvip51.hostiman.ru'
    ftp_user = 'cicada'
    ftp_password = 'Tramadol1989!'

    ftp = ftplib.FTP(host, ftp_user, ftp_password)
    
    ftp.cwd("www/arizone.ru/")

    ftp_file = 'index.html'
    local_file = 'index.html'
    file = "index.html"
    with open(local_file, 'wb') as local_file: 
        ftp.retrbinary('retr ' + ftp_file, local_file.write)
    with open ('index.html', 'r') as f:
      old_data = f.readlines()
      tt = old_data[518]
      tat = tt.split('"')
      otziv = tat[7]
      tt1 = old_data[505]
      tat1 = tt1.split('"')
      legal = tat1[7]
      tt2 = old_data[497]
      tat2 = tt2.split('"')
      rez = tat2[7]
      tt3 = old_data[481]
      tat3 = tt3.split('"')
      wc = tat3[7]
      tt4 = old_data[474]
      tat4 = tt4.split('"')
      rabota = tat4[7]
      tt5 = old_data[459]
      tat5 = tt5.split('"')
      gidra = tat5[7]
      tt6 = old_data[452]
      tat6 = tt6.split('"')
      bbboot = tat6[7]
      tt7 = old_data[439]
      tat7 = tt7.split('"')
      texx = tat7[1]
      tt8 = old_data[430]
      tat8 = tt8.split('"')
      oer = tat8[7]
    await call.message.answer(
      f"<b>–°–µ–π—á–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {wc}</b>\n\n"
      f"<b>–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ http://t.me/username/ </b>")
    await sms7.sms_text.set()


    @dp.message_handler(state=sms7.sms_text)
    async def whatsApp(message: Message,  state: FSMContext):
        await message.answer("<b>–ò–¥–µ—Ç –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –î–∞–Ω–Ω—ã—Ö –°–∞–π—Ç–∞....</b>")
        chat_id = message.chat.id
        data = await state.get_data()
        sms = message.text
        with open ('index.html', 'r') as f:
          old_data = f.read()
          new_data = old_data.replace(wc, sms)
        
        with open ('index.html', 'w') as f:
          f.write(new_data)
        file_to_upload = open(file, 'rb')
        ftp.storbinary('STOR ' + file, file_to_upload)
        ftp.close()
        query = "https://shot.screenshotapi.net/screenshot"
        query += "?token=%s&url=%s&width=%d&height=%d&output=%s" % (token, url, width, height, output)
        urllib.request.urlretrieve(query, "./screenshot.png")
        with open("screenshot.png", 'rb') as f:
          foto = f.read()
        cap = (
          f"<b>–î–∞–Ω–Ω—ã–µ –°–∞–π—Ç–∞ –û–±–Ω–æ–≤–ª–µ–Ω—ã !</b>\n"
          f"<b>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç: </b>\n\n"
          f"http://arizone.ru\n"
        )
        await bot.send_photo(chat_id, foto, caption=cap, reply_markup=xxx)

@dp.callback_query_handler(text="rab", state="*")
async def rab(call: CallbackQuery, state: FSMContext):
    host = 'ruvip51.hostiman.ru'
    ftp_user = 'cicada'
    ftp_password = 'Tramadol1989!'

    ftp = ftplib.FTP(host, ftp_user, ftp_password)
    
    ftp.cwd("www/arizone.ru/")

    ftp_file = 'index.html'
    local_file = 'index.html'
    file = "index.html"
    with open(local_file, 'wb') as local_file: 
        ftp.retrbinary('retr ' + ftp_file, local_file.write)
    with open ('index.html', 'r') as f:
      old_data = f.readlines()
      tt = old_data[518]
      tat = tt.split('"')
      otziv = tat[7]
      tt1 = old_data[505]
      tat1 = tt1.split('"')
      legal = tat1[7]
      tt2 = old_data[497]
      tat2 = tt2.split('"')
      rez = tat2[7]
      tt3 = old_data[481]
      tat3 = tt3.split('"')
      wc = tat3[7]
      tt4 = old_data[474]
      tat4 = tt4.split('"')
      rabota = tat4[7]
      tt5 = old_data[459]
      tat5 = tt5.split('"')
      gidra = tat5[7]
      tt6 = old_data[452]
      tat6 = tt6.split('"')
      bbboot = tat6[7]
      tt7 = old_data[439]
      tat7 = tt7.split('"')
      texx = tat7[1]
      tt8 = old_data[430]
      tat8 = tt8.split('"')
      oer = tat8[7]
    await call.message.answer(
      f"<b>–°–µ–π—á–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {rabota}</b>\n\n"
      f"<b>–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ http://t.me/username/ </b>")
    await sms6.sms_text.set()


    @dp.message_handler(state=sms6.sms_text)
    async def rab(message: Message,  state: FSMContext):
        await message.answer("<b>–ò–¥–µ—Ç –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –î–∞–Ω–Ω—ã—Ö –°–∞–π—Ç–∞....</b>")
        chat_id = message.chat.id
        data = await state.get_data()
        sms = message.text
        with open ('index.html', 'r') as f:
          old_data = f.read()
          new_data = old_data.replace(rabota, sms)
        
        with open ('index.html', 'w') as f:
          f.write(new_data)
        file_to_upload = open(file, 'rb')
        ftp.storbinary('STOR ' + file, file_to_upload)
        ftp.close()
        query = "https://shot.screenshotapi.net/screenshot"
        query += "?token=%s&url=%s&width=%d&height=%d&output=%s" % (token, url, width, height, output)
        urllib.request.urlretrieve(query, "./screenshot.png")
        with open("screenshot.png", 'rb') as f:
          foto = f.read()
        cap = (
          f"<b>–î–∞–Ω–Ω—ã–µ –°–∞–π—Ç–∞ –û–±–Ω–æ–≤–ª–µ–Ω—ã !</b>\n"
          f"<b>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç: </b>\n\n"
          f"http://arizone.ru\n"
        )
        await bot.send_photo(chat_id, foto, caption=cap, reply_markup=xxx)


@dp.callback_query_handler(text="hudra", state="*")
async def hudra(call: CallbackQuery, state: FSMContext):
    host = 'ruvip51.hostiman.ru'
    ftp_user = 'cicada'
    ftp_password = 'Tramadol1989!'

    ftp = ftplib.FTP(host, ftp_user, ftp_password)
    
    ftp.cwd("www/arizone.ru/")

    ftp_file = 'index.html'
    local_file = 'index.html'
    file = "index.html"
    with open(local_file, 'wb') as local_file: 
        ftp.retrbinary('retr ' + ftp_file, local_file.write)
    with open ('index.html', 'r') as f:
      old_data = f.readlines()
      tt = old_data[518]
      tat = tt.split('"')
      otziv = tat[7]
      tt1 = old_data[505]
      tat1 = tt1.split('"')
      legal = tat1[7]
      tt2 = old_data[497]
      tat2 = tt2.split('"')
      rez = tat2[7]
      tt3 = old_data[481]
      tat3 = tt3.split('"')
      wc = tat3[7]
      tt4 = old_data[474]
      tat4 = tt4.split('"')
      rabota = tat4[7]
      tt5 = old_data[459]
      tat5 = tt5.split('"')
      gidra = tat5[7]
      tt6 = old_data[452]
      tat6 = tt6.split('"')
      bbboot = tat6[7]
      tt7 = old_data[439]
      tat7 = tt7.split('"')
      texx = tat7[1]
      tt8 = old_data[430]
      tat8 = tt8.split('"')
      oer = tat8[7]
    await call.message.answer(
      f"<b>–°–µ–π—á–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {gidra}</b>\n\n"
      f"<b>–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ http://t.me/username/ </b>")
    await sms5.sms_text.set()


    @dp.message_handler(state=sms5.sms_text)
    async def hudra(message: Message,  state: FSMContext):
        await message.answer("<b>–ò–¥–µ—Ç –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –î–∞–Ω–Ω—ã—Ö –°–∞–π—Ç–∞....</b>")
        chat_id = message.chat.id
        data = await state.get_data()
        sms = message.text
        with open ('index.html', 'r') as f:
          old_data = f.read()
          new_data = old_data.replace(gidra, sms)
        
        with open ('index.html', 'w') as f:
          f.write(new_data)
        file_to_upload = open(file, 'rb')
        ftp.storbinary('STOR ' + file, file_to_upload)
        ftp.close()
        query = "https://shot.screenshotapi.net/screenshot"
        query += "?token=%s&url=%s&width=%d&height=%d&output=%s" % (token, url, width, height, output)
        urllib.request.urlretrieve(query, "./screenshot.png")
        with open("screenshot.png", 'rb') as f:
          foto = f.read()
        cap = (
          f"<b>–î–∞–Ω–Ω—ã–µ –°–∞–π—Ç–∞ –û–±–Ω–æ–≤–ª–µ–Ω—ã !</b>\n"
          f"<b>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç: </b>\n\n"
          f"http://arizone.ru\n"
        )
        await bot.send_photo(chat_id, foto, caption=cap, reply_markup=xxx)

@dp.callback_query_handler(text="bbb", state="*")
async def bbb(call: CallbackQuery, state: FSMContext):
    host = 'ruvip51.hostiman.ru'
    ftp_user = 'cicada'
    ftp_password = 'Tramadol1989!'

    ftp = ftplib.FTP(host, ftp_user, ftp_password)
    
    ftp.cwd("www/arizone.ru/")

    ftp_file = 'index.html'
    local_file = 'index.html'
    file = "index.html"
    with open(local_file, 'wb') as local_file: 
        ftp.retrbinary('retr ' + ftp_file, local_file.write)
    with open ('index.html', 'r') as f:
      old_data = f.readlines()
      tt = old_data[518]
      tat = tt.split('"')
      otziv = tat[7]
      tt1 = old_data[505]
      tat1 = tt1.split('"')
      legal = tat1[7]
      tt2 = old_data[497]
      tat2 = tt2.split('"')
      rez = tat2[7]
      tt3 = old_data[481]
      tat3 = tt3.split('"')
      wc = tat3[7]
      tt4 = old_data[474]
      tat4 = tt4.split('"')
      rabota = tat4[7]
      tt5 = old_data[459]
      tat5 = tt5.split('"')
      gidra = tat5[7]
      tt6 = old_data[452]
      tat6 = tt6.split('"')
      bbboot = tat6[7]
      tt7 = old_data[439]
      tat7 = tt7.split('"')
      texx = tat7[1]
      tt8 = old_data[430]
      tat8 = tt8.split('"')
      oer = tat8[7]
    await call.message.answer(
      f"<b>–°–µ–π—á–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {bbboot}</b>\n\n"
      f"<b>–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ http://t.me/username/ </b>")
    await sms4.sms_text.set()


    @dp.message_handler(state=sms4.sms_text)
    async def bbb(message: Message,  state: FSMContext):
        await message.answer("<b>–ò–¥–µ—Ç –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –î–∞–Ω–Ω—ã—Ö –°–∞–π—Ç–∞....</b>")
        chat_id = message.chat.id
        data = await state.get_data()
        sms = message.text
        with open ('index.html', 'r') as f:
          old_data = f.read()
          new_data = old_data.replace(bbboot, sms)
        
        with open ('index.html', 'w') as f:
          f.write(new_data)
        file_to_upload = open(file, 'rb')
        ftp.storbinary('STOR ' + file, file_to_upload)
        ftp.close()
        query = "https://shot.screenshotapi.net/screenshot"
        query += "?token=%s&url=%s&width=%d&height=%d&output=%s" % (token, url, width, height, output)
        urllib.request.urlretrieve(query, "./screenshot.png")
        with open("screenshot.png", 'rb') as f:
          foto = f.read()
        cap = (
          f"<b>–î–∞–Ω–Ω—ã–µ –°–∞–π—Ç–∞ –û–±–Ω–æ–≤–ª–µ–Ω—ã !</b>\n"
          f"<b>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç: </b>\n\n"
          f"http://arizone.ru\n"
        )
        await bot.send_photo(chat_id, foto, caption=cap, reply_markup=xxx)

@dp.callback_query_handler(text="tex", state="*")
async def texp(call: CallbackQuery, state: FSMContext):
    host = 'ruvip51.hostiman.ru'
    ftp_user = 'cicada'
    ftp_password = 'Tramadol1989!'

    ftp = ftplib.FTP(host, ftp_user, ftp_password)
    
    ftp.cwd("www/arizone.ru/")

    ftp_file = 'index.html'
    local_file = 'index.html'
    file = "index.html"
    with open(local_file, 'wb') as local_file: 
        ftp.retrbinary('retr ' + ftp_file, local_file.write)
    with open ('index.html', 'r') as f:
      old_data = f.readlines()
      tt = old_data[518]
      tat = tt.split('"')
      otziv = tat[7]
      tt1 = old_data[505]
      tat1 = tt1.split('"')
      legal = tat1[7]
      tt2 = old_data[497]
      tat2 = tt2.split('"')
      rez = tat2[7]
      tt3 = old_data[481]
      tat3 = tt3.split('"')
      wc = tat3[7]
      tt4 = old_data[474]
      tat4 = tt4.split('"')
      rabota = tat4[7]
      tt5 = old_data[459]
      tat5 = tt5.split('"')
      gidra = tat5[7]
      tt6 = old_data[452]
      tat6 = tt6.split('"')
      bbboot = tat6[7]
      tt7 = old_data[439]
      tat7 = tt7.split('"')
      texx = tat7[1]
      tt8 = old_data[430]
      tat8 = tt8.split('"')
      oer = tat8[7]
    await call.message.answer(
      f"<b>–°–µ–π—á–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {texx}</b>\n\n"
      f"<b>–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ http://t.me/username/ </b>")
    await sms3.sms_text.set()


    @dp.message_handler(state=sms3.sms_text)
    async def texp(message: Message,  state: FSMContext):
        await message.answer("<b>–ò–¥–µ—Ç –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –î–∞–Ω–Ω—ã—Ö –°–∞–π—Ç–∞....</b>")
        chat_id = message.chat.id
        data = await state.get_data()
        sms = message.text
        with open ('index.html', 'r') as f:
          old_data = f.read()
          new_data = old_data.replace(texx, sms)
        
        with open ('index.html', 'w') as f:
          f.write(new_data)
        file_to_upload = open(file, 'rb')
        ftp.storbinary('STOR ' + file, file_to_upload)
        ftp.close()
        query = "https://shot.screenshotapi.net/screenshot"
        query += "?token=%s&url=%s&width=%d&height=%d&output=%s" % (token, url, width, height, output)
        urllib.request.urlretrieve(query, "./screenshot.png")
        with open("screenshot.png", 'rb') as f:
          foto = f.read()
        cap = (
          f"<b>–î–∞–Ω–Ω—ã–µ –°–∞–π—Ç–∞ –û–±–Ω–æ–≤–ª–µ–Ω—ã !</b>\n"
          f"<b>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç: </b>\n\n"
          f"http://arizone.ru\n"
        )
        await bot.send_photo(chat_id, foto, caption=cap, reply_markup=xxx)


@dp.callback_query_handler(text="oper", state="*")
async def oper(call: CallbackQuery, state: FSMContext):
    host = 'ruvip51.hostiman.ru'
    ftp_user = 'cicada'
    ftp_password = 'Tramadol1989!'

    ftp = ftplib.FTP(host, ftp_user, ftp_password)
    
    ftp.cwd("www/arizone.ru/")

    ftp_file = 'index.html'
    local_file = 'index.html'
    file = "index.html"
    with open(local_file, 'wb') as local_file: 
        ftp.retrbinary('retr ' + ftp_file, local_file.write)
    with open ('index.html', 'r') as f:
      old_data = f.readlines()
      tt = old_data[518]
      tat = tt.split('"')
      otziv = tat[7]
      tt1 = old_data[505]
      tat1 = tt1.split('"')
      legal = tat1[7]
      tt2 = old_data[497]
      tat2 = tt2.split('"')
      rez = tat2[7]
      tt3 = old_data[481]
      tat3 = tt3.split('"')
      wc = tat3[7]
      tt4 = old_data[474]
      tat4 = tt4.split('"')
      rabota = tat4[7]
      tt5 = old_data[459]
      tat5 = tt5.split('"')
      gidra = tat5[7]
      tt6 = old_data[452]
      tat6 = tt6.split('"')
      bbboot = tat6[7]
      tt7 = old_data[439]
      tat7 = tt7.split('"')
      texx = tat7[1]
      tt8 = old_data[430]
      tat8 = tt8.split('"')
      oer = tat8[7]


    await call.message.answer(
      f"<b>–°–µ–π—á–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {oer}</b>\n\n"
      f"<b>–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ http://t.me/username/ </b>")
    await sms2.sms_text.set()


    @dp.message_handler(state=sms2.sms_text)
    async def operator(message: Message,  state: FSMContext):
        await message.answer("<b>–ò–¥–µ—Ç –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –î–∞–Ω–Ω—ã—Ö –°–∞–π—Ç–∞....</b>")
        chat_id = message.chat.id
        data = await state.get_data()
        sms = message.text
        with open ('index.html', 'r') as f:
          old_data = f.read()
          new_data = old_data.replace(oer, sms)
        
        with open ('index.html', 'w') as f:
          f.write(new_data)

        file_to_upload = open(file, 'rb')
        ftp.storbinary('STOR ' + file, file_to_upload)
        ftp.close()
        query = "https://shot.screenshotapi.net/screenshot"
        query += "?token=%s&url=%s&width=%d&height=%d&output=%s" % (token, url, width, height, output)
        urllib.request.urlretrieve(query, "./screenshot.png")
        with open("screenshot.png", 'rb') as f:
          foto = f.read()
        cap = (
          f"<b>–î–∞–Ω–Ω—ã–µ –°–∞–π—Ç–∞ –û–±–Ω–æ–≤–ª–µ–Ω—ã !</b>\n"
          f"<b>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç: </b>\n\n"
          f"http://arizone.ru\n"
        )
        await bot.send_photo(chat_id, foto, caption=cap, reply_markup=xxx)


if __name__ == "__main__":
    executor.start_polling(dp)
